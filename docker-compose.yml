version: "3.9"

services:
  # cache storage for replica
  redis_api:
    image: redis
    container_name: redis_api
  db_api:
    image: postgres
    container_name: db_api
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

    # CQRS transport backend
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: password
  ftpd_server:
    image: stilliard/pure-ftpd
    container_name: ftpd_server
    volumes: # remember to replace /folder_on_disk/ with the path to where you want to store the files on the host machine
      - "./api_replica/media:/home/username/"
      - "./data/ftp/passwd:/etc/pure-ftpd/passwd"
    environment:
      PUBLICHOST: "localhost"
      FTP_USER_NAME: ftpd_server
      FTP_USER_PASS: password
      FTP_USER_HOME: /home/username
# also for ssl/tls:
#      ADDED_FLAGS: "--tls=2"
    restart: always
  api:
    build: ./api_server
    container_name: api_server
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./api_server:/api_code
    ports:
      - 8000:8000
    depends_on:
      - rabbitmq
      - redis_api
      - db_api
  redis_replica_1:
    image: redis
    container_name: redis_replica_1
  db_replica_1:
    image: postgres
    container_name: db_replica_1
    volumes:
      - ./data/db_replica_1:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  api_replica_1:
    build: ./api_replica
    container_name: api_replica_1
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./api_replica:/api_code
    ports:
      - 8001:8000
    depends_on:
      - rabbitmq
      - redis_replica_1
      - db_replica_1
    links:
        - "redis_replica_1:redis_replica"
        - "db_replica_1:db_replica"
  api_replica_1_consumer:
    build: ./api_replica
    container_name: api_replica_1_consumer
    command: >
      ./manage.py cqrs_consume -w2
    volumes:
      - ./api_replica:/api_code
    depends_on:
      - rabbitmq
      - redis_replica_1
      - db_replica_1
    links:
        - "redis_replica_1:redis_replica"
        - "db_replica_1:db_replica"

  redis_replica_2:
    image: redis
    container_name: redis_replica_2
  db_replica_2:
    image: postgres
    container_name: db_replica_2
    volumes:
      - ./data/db_replica_2:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  api_replica_2:
    build: ./api_replica
    container_name: api_replica_2
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    ports:
      - 8002:8000
    volumes:
      - ./api_replica:/api_code
    depends_on:
      - rabbitmq
      - redis_replica_2
      - db_replica_2
    links:
        - "redis_replica_2:redis_replica"
        - "db_replica_2:db_replica"
  api_replica_2_consumer:
    build: ./api_replica
    container_name: api_replica_2_consumer
    command: >
      ./manage.py cqrs_consume -w2
    volumes:
      - ./api_replica:/api_code
    depends_on:
      - rabbitmq
      - redis_replica_2
      - db_replica_2
    links:
    - "redis_replica_2:redis_replica"
    - "db_replica_2:db_replica"
  redis_web:
    image: redis
    container_name: redis_web
  web_1:
    build: ./web_server
    container_name: web_1
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./web_server:/web_code
    depends_on:
      - api
  web_2:
    build: ./web_server
    container_name: web_2
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./web_server:/web_code
    depends_on:
      - api

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx_server/reverse_proxy.conf:/etc/nginx/conf.d/default.conf
      - ./nginx_server/ssl/cert/dhparam.pem:/etc/nginx/cert/star_xx_com.pem
      - ./nginx_server/ssl/private/nginx-selfsigned.key:/etc/nginx/cert/star_xx_com.key
      - ./nginx_server/ssl/cert/nginx-selfsigned.crt:/etc/nginx/cert/star_xx_com.crt
    ports:
      - "8080:8080"
      - "443:443"
      - "80:80"
    links:
     - api
     - web_1
     - web_2
     - api_replica_1
     - api_replica_2
volumes:
  db-data:
